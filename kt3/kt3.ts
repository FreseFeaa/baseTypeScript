/**
  ‚Ä¢ –ü–ª–æ—Ç—Ç–µ—Ä –≤—Å–µ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—è—Ç—å –∫–æ–º–∞–Ω–¥:

  ‚Ä¢ 1. –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –∫–∞—Ä–µ—Ç–∫—É –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
  ‚Ä¢ 2. –ü–æ–≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ –∏–ª–∏ –ø—Ä–æ—Ç–∏–≤ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–∏.
  ‚Ä¢ 3. –û–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–æ–¥–Ω—è—Ç—å –∫–∞—Ä–µ—Ç–∫—É. –ö–æ–≥–¥–∞ –∫–∞—Ä–µ—Ç–∫–∞ –æ–ø—É—â–µ–Ω–∞, –ø–ª–æ—Ç—Ç–µ—Ä –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ä–∏—Å—É–µ—Ç –ª–∏–Ω–∏—é.
  ‚Ä¢ 4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏ (–æ–¥–∏–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ, –∫—Ä–∞—Å–Ω–æ–≥–æ –∏–ª–∏ –∑–µ–ª—ë–Ω–æ–≥–æ).
  ‚Ä¢ 5. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä–µ—Ç–∫–∏.
 */


  //–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
type Point = number;
type Distance = number;
type Angle = number;
type Position = { x: Point; y: Point };
enum CarriageState {
  UP,
  DOWN
}
enum LineColor {
  BLACK = "‚ö´ –ß—ë—Ä–Ω—ã–π",
  RED = "üî¥ –ö—Ä–∞—Å—Å–Ω—ã–π",
  GREEN = "üü¢ –ó–µ–ª—å–æ–Ω—ã–π"
}
type PlotterState = {
  position: Position;
  angle: Angle;
  color: LineColor;
  carriageState: CarriageState;
};

//–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –õ–æ–≥–≥–µ—Ä–∞ (–í—Å–µ –ø–æ —Ç–∑)
interface Logger{
 log(message: string): void;
}

//–ö–ª–∞—Å—Å LogToConsole - –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Logger (–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ—É –≤ –∫–æ–Ω—Å–æ–ª—å)
class LogToConsole implements Logger{
    log(message: string): void {
        console.log(message);
    }
}


//     –§—É–Ω–∫—Ü–∏–∏ –ø–ª–æ—Ç–µ—Ä–∞


// –ö–ª–∞—Å—Å –ª–∏–Ω–∏–∏ "—Ä–∏—Å–æ–≤–∞—Ç—å"

class LineDrawer {
    private logger: Logger;

    constructor(logger: Logger) {
        this.logger = logger;
    }

    // –ß–µ—Ä—Ç–∏—Ç –ª–∏–Ω–∏—é –æ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç from –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º to
    drawLine(from: Position, to: Position, color: LineColor): void {
        this.logger.log(`üñãÔ∏è ...–ß–µ—Ä—Ç–∏–º –ª–∏–Ω–∏—é –∏–∑ (${from.x}, ${from.y}) –≤ (${to.x}, ${to.y}) –∏—Å–ø–æ–ª—å–∑—É—è ${color} —Ü–≤–µ—Ç.`);
    }
}


// –ö–ª–∞—Å—Å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π

class PositionCalculator {
    
    //–í—ã—á–∏—Å–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    
    calcNewPosition(distance: Distance, angle: Angle, current: Position): Position {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã –ø—Ä–∏ 180.0 –≥—Ä–∞–¥—É—Å–æ–≤ = 1 pi —Ä–∞–¥–∏–∞–Ω (–•–æ—Ç—å –≥–¥–µ-—Ç–æ –º–∞—Ç–µ—à–∞ –ø—Ä–∏–≥–æ–¥–∏–ª–∞—Å—å)
        const angle_in_rads = angle * (Math.PI / 180.0) * 1.0;
        // –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
        const x = current.x + distance * Math.cos(angle_in_rads);
        const y = current.y + distance * Math.sin(angle_in_rads);
        // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        return {x: Math.round(x), y: Math.round(y)};
    }
}

//Sigma plotter –∫–ª–∞—Å—Å—Å
class Plotter {
    private state: PlotterState;
    private logger: Logger;
    private lineDrawer: LineDrawer;
    private positionCalculator: PositionCalculator;

    constructor(logger: Logger, initialPosition: Position = {x: 0, y: 0}, initialAngle: Angle = 0, initialColor: LineColor = LineColor.BLACK, initialCarriageState: CarriageState = CarriageState.UP) {
        this.logger = logger;
        this.state = {             position: initialPosition,
            angle: initialAngle,
            color: initialColor,
            carriageState: initialCarriageState
        };
        this.lineDrawer = new LineDrawer(logger);
        this.positionCalculator = new PositionCalculator();
    }
    //–•–æ–¥–∏—Ç—å
    move(distance: Distance): void {
        // –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        let newPosition = this.positionCalculator.calcNewPosition(distance, this.state.angle, this.state.position);
        // draw line if needed
        if (this.state.carriageState === CarriageState.DOWN) {
            // –ó–¥–µ—Å—å —Å–ª–µ–¥—É–µ—Ç –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∏–Ω–∏–∏
            this.lineDrawer.drawLine(this.state.position, newPosition, this.state.color);
        } else {
            this.logger.log(`üèÉüèª‚Äç‚ôÇÔ∏è  –ü–µ—Ä–µ–¥–≤–∏–≥–∞–µ–º –Ω–∞ ${distance} –æ—Ç —Ç–æ—á–∫–∏ (${this.state.position.x}, ${this.state.position.y})`);
        }
        // –∏–∑–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.state.position = newPosition;
    }
    //–í—Ä–∞—â–∞—Ç—å—Å—è
    turn(angle: Angle): void {
        this.logger.log(`üîÑ  –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –Ω–∞ ${angle} –≥—Ä–∞–¥—É—Å–æ–≤`);
        // –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —É–≥–æ–ª
        this.state.angle = (this.state.angle + angle) % 360.0;
    }
    //–ü–æ–¥–Ω—è—Ç—å –∫–∞—Ä–µ—Ç–∫—É
    carriageUp(): void {
        this.logger.log("‚¨ÜÔ∏è   –ü–æ–¥–Ω–∏–º–∞–µ–º –∫–∞—Ä–µ—Ç–∫—É");
        this.state.carriageState = CarriageState.UP;
    }
    //–û–ø—É—Å—Ç–∏—Ç—å –∫–∞—Ä–µ—Ç–∫—É
    carriageDown(): void {
        this.logger.log("‚¨áÔ∏è   –û–ø—É—Å–∫–∞–µ–º –∫–∞—Ä–µ—Ç–∫—É");
        this.state.carriageState = CarriageState.DOWN;
    }
    //–°–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç
    setColor(color: LineColor | string): void {
        if (typeof color === 'string'){
            if (color === '‚ö´ –ß—ë—Ä–Ω—ã–π'){
                this.state.color = LineColor.BLACK;
            }
            else if(color === 'üî¥ –ö—Ä–∞—Å—Å–Ω—ã–π'){
                this.state.color = LineColor.RED
            } else if(color === 'üü¢ –ó–µ–ª—å–æ–Ω—ã–π'){
                this.state.color = LineColor.GREEN
            }
            this.logger.log(`üé®  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${color} —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏.`);

        }
        else{
            this.logger.log(`üé®  –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ${color} —Ü–≤–µ—Ç –ª–∏–Ω–∏–∏.`);
            this.state.color = color;
        }


    }
    //–ü–æ–∑–∏—Ü–∏–π –∫–∞—Ä–µ—Ç–∫
    setPosition(position: Position): void {
        this.logger.log(`üó∫Ô∏è   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞—Ä–µ—Ç–∫–∏ –≤ (${position.x}, ${position.y}).`);
        this.state.position = position;
    }
}


// –ö–ª–∞—Å—Å –¥–ª—è –ß–µ—Ä—Ç–∏—Ç—å –§–∏–≥—É—Ä–∞
class FigureDrawer {
    //–°—é–¥–∞ –µ—â–µ –õ–æ–≥–≥–µ—Ä –ø—Ä–æ–∫–∏–Ω—É–ª, —á—Ç–æ–± –ø–æ –∫—Ä–∞—Å–æ—Ç–µ –≤—Å–µ –±—ã–ª–æ
    private logger: Logger;
        constructor(logger: Logger) {
        this.logger = logger;
    }
    drawTriangle(plt: Plotter, size: Distance): void {
        this.logger.log("\nüî∫  –†–∏—Å—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫\n")
        plt.setColor('üü¢ –ó–µ–ª—å–æ–Ω—ã–π');
        for (let i = 0; i < 3; ++i) {
            plt.carriageDown();
            plt.move(size);
            plt.carriageUp();
            plt.turn(120.0);
        }
        this.logger.log("‚úÖ  –ì–æ—Ç–æ–≤–æ\n")
    }

    drawSquare(plt: Plotter, size: number): void {
        this.logger.log("\nüü•  –†–∏—Å—É–µ–º –∫–≤–∞–¥—Ä–∞—Ç\n")
        plt.carriageDown();
        for (let i = 0; i < 4; ++i) {
            plt.move(size);
            plt.turn(90.0);
        }
        plt.carriageUp();
        this.logger.log("‚úÖ  –ì–æ—Ç–æ–≤–æ\n")
        
    }
}


//–û—Å–Ω–æ–≤–∞ (–î–µ–ª–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–∫—É)
const logger = new LogToConsole();

//–ß–µ—Ä—Ç–∏–º—Å—è –ø–æ –ø–æ–ª–Ω–æ–π
const plotter = new Plotter(logger);
const figureDrawer = new FigureDrawer(logger);


figureDrawer.drawTriangle(plotter, 100.0);

console.log("\n‚öôÔ∏è   –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
plotter.setPosition({x: 10.0, y: 10.0});
plotter.setColor(LineColor.RED);

figureDrawer.drawSquare(plotter, 80.0);